# Single-target (ADBIS version)
# GMM, TMM-GS, and TMM-S

import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

def read_data(metabase):
    data = pd.read_csv(metabase)
    data = data[data.k_searching == 30].copy()
    # data = data[~data.base.str.startswith('base')] # V2: excluindo dados sint√©ticos
    data.drop(['index'], axis=1, inplace=True)
    data.loc[:, 'QueryTime'] = data.QueryTime.apply(np.log)
    data.set_index('base', inplace=True)
    return data

def get_predictions(X_train, X_test, y_train, y_test):
    reg = RandomForestRegressor(n_estimators=100)
    reg.fit(X_train, y_train)
    return reg.predict(X_test)

def gmm(data, base_target):
    """
        Generic meta-model (GMM).
        ----------------------------------------------
        All meta-instances of our meta-dataset regarding all datasets
        were used for meta-training, except for the meta-instances
        regarding the goal dataset, which was used for meta-testing.
        ----------------------------------------------
    """
    train = data[data.index != base_target]
    test = data[data.index == base_target]
    return train, test #[test.nr_inst == test.nr_inst.max()]

def tmm_gs(data, base_target):
    """
        Tuned meta-model using grid search (TMM-GS).
        ----------------------------------------------
        All meta-instances of our meta-dataset regarding all datasets
        (except for the ones referring to the goal dataset) plus meta-
        instances generated by a grid search performed over the goal
        dataset were used for meta-training and the goal dataset was
        used for testing.
        ----------------------------------------------
        GS params:
        NN = [1, 25, 70, 150],
        R = [1, 10, 40, 120],
        k = 30
    """
    train = data[data.index != base_target]
    test = data[data.index == base_target]
    gs_instances = test[
        (test.IndexParams.isin([1,25,70, 150])) &
        (test.QueryTimeParams.isin([1,10,40,120])) &
        (test.nr_inst == test.nr_inst.max())
    ]
    train = pd.concat([train, gs_instances])
    return train, test[test.nr_inst == test.nr_inst.max()]

def tmm_s(data, base_target):
    """
    Tuned meta-model using subsets (TMM-S).
    ----------------------------------------------
    Meta-instances of our meta-dataset regarding all datasets
    (except for the ones regarding the goal dataset) plus meta-
    instances of subsets of the real datasets were used for meta-
    training, the remaining meta-instances were used for meta-testing.
    ----------------------------------------------
    """
    sizes = [69900, 25274, 67940, 999900] # sizes of complete datasets
    train = data[data.index != base_target]
    test = data[data.index == base_target]

    subset_instances = test[test.nr_inst != test.nr_inst.max()]
    train = pd.concat([train, subset_instances])
    return train, test[test.nr_inst == test.nr_inst.max()]
    
if __name__ == "__main__":
    metabase = 'data/metabase/metabase_all_k_search.csv'
    c = ["base", "true", 'pred', "target", "NN", "R", "graph_type", "nr_inst", 'k_searching']
    RESULTS = pd.DataFrame(columns=c)
    META_TARGETS = ['Recall', 'QueryTime', 'DistComp', 'IndexTime']
    DATASET_TARGET = ['mnist', 'colorHisto', 'moments', 'sift', 'texture']
    APPROACHES = [gmm]#, tmm_gs, tmm_s]
    get_xy = lambda x: (x.drop(META_TARGETS, axis=1), x[META_TARGETS])
    
    # reading meta-database
    data = read_data(metabase)

    for approach in APPROACHES:
        for base_target in DATASET_TARGET:
            # moduling data according to approach
            train, test = approach(data, base_target)

            # train, test, and predictions
            X_train, y_train = get_xy(train)
            X_test, y_test = get_xy(test)

            # inducing a meta-model for each meta-target
            for metatarget in META_TARGETS:
                predictions = get_predictions(X_train, X_test, y_train[metatarget], y_test[metatarget])

                # formating results
                res = pd.DataFrame({
                    "base": X_test.index,
                    "true": y_test[metatarget].values,
                    "pred": predictions,
                    "target": [metatarget] * len(y_test),
                    "NN": X_test.IndexParams.values,
                    "R": X_test.QueryTimeParams.values,
                    "graph_type": X_test.graph_type.values,
                    "nr_inst": X_test.nr_inst.values,
                    "approach": [approach.__name__] * len(y_test),
                    "k_searching": X_test.k_searching.values
                })
                RESULTS = pd.concat([RESULTS, res])

    RESULTS.to_csv('results/csv/true_pred_all_methods_v2.csv', index=False)